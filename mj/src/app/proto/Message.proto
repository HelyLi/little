package Message;

enum MESSAGEID
{
	MIN_SERVER_MSG_ID = 0;
	G2M_CONN_CLOSE = 1;
	M2G_PLAYER_KICK = 2;
	G2C_PLAYER_KICK = 3;
	REGISTER_SERVER = 4;
	//max server to server ctrl msg id
	MAX_SERVER_MSG_ID = 10000;
	
	// client to server logic msg	
	C2L_PLAYER_LOGIN_SYN = 10005;     					//客户端登入请求
	L2C_PLAYER_LOGIN_ACK = 10006;   					//登入回执
	L2C_PLAYER_BASEINFO_ACK = 10007;				//玩家基本信息
	L2D_PLAYER_LOGIN_SYN = 10008;     		 			//大厅请求登入玩家信息
	D2L_PLAYER_PLAYER_TOTALINFO_ACK = 10009;  //DB给大厅的登入回执信息
	L2D_PLAYERINFO_UPDATE_SYN = 10012;             //玩家基本信息更新
	
	//client to lobby
	C2M_PLAYER_CREATE_ROOM_SYN = 10013;
	M2C_PLAYER_CREATE_ROOM_ACK = 10014;
	L2M_PLAYER_CREATE_ROOM_SYN = 10015;
	M2L_PLAYER_CREATE_ROOM_ACK = 10016;
	
	//client to game
	C2M_PLAYER_ENTER_ROOM_SYN = 10017;
	M2C_PLAYER_ENTER_ROOM_ACK = 10018;
	
	M2L_GET_PLAYER_INFO_SYN = 10019;
	L2M_GET_PLAYER_INFO_ACK = 10020;
	
	M2L_PLAYER_ENTER_ROOM_NOTIFY = 10021;
	
	//client to lobby 
	C2M_PLAYER_REQ_ENTER_ROOM_SYN = 10022;
	M2C_PLAYER_REQ_ENTER_ROOM_ACK = 10023;
	
	//lobby to client
	L2C_PLAYER_ROOM_LIST_ACK = 10024;
	L2C_GAME_SERVER_INFO_NOTIFY = 10025;
	
	//game to lobby
	M2L_UPDATE_PLAYER_STATE_NOTIFY = 10026;
	
	//lobby notify game token expire
	L2M_PLAYER_TOKEN_EXPIRE_NOTIFY = 10027;
	
	//client reconnect lobby server
	C2L_PLAYER_RECONNECT_LOBBY_SYN = 10028;
	L2C_PLAYER_RECONNECT_LOBBY_ACK = 10029;
	
	//client reconnect game server
	C2M_PLAYER_RECONNECT_GAME_SYN = 10030;
	M2C_PLAYER_RECONNECT_GAME_ACK = 10031;
	
	//game server to client
	M2C_GAME_ROOM_INFO_NOTIFY = 10032;
	
	//table player baseinfo
	M2C_TABLE_PLAYER_INFO_NOTIFY = 10033;
	
	//client sit down
	C2M_PLAYER_SIT_DOWN_SYN = 10034;
	M2C_PLAYER_SIT_DOWN_ACK = 10035;
	
	//client operation leave room or dismiss room
	C2M_PLAYER_OP_SYN = 10036;
	M2C_PLAYER_OP_ACK = 10037;
	
	//notify player leave
	M2C_PLAYER_LEAVE_FROM_ROOM = 10038;
	
	//notify player dismiss room
	M2C_DISMISS_ROOM_NOTIFY = 10039;
	
	//game to lobby notify player leave or dismiss room
	M2L_PLAYER_OP_SYN = 10040;
	L2M_PLAYER_OP_ACK = 10041;
	
	//game to lobby notify player sit down
	M2L_PLAYER_SIT_DOWN_NOTIFY = 10042;
	
	//game logic message
	
	//game start 
	C2M_GAME_START_SYN = 10043;
	M2C_GAME_START_ACK = 10044;
	M2C_GAME_START_NOTIFY = 10045;
		
	//player hand card info
	M2C_PLAYER_HAND_CARD_NOTIFY = 10046;
	
	//player call banker
	C2M_PLAYER_CALL_BANKER_SYN = 10047;
	M2C_PLAYER_CALL_BANKER_ACK = 10048;
	M2C_PLAYER_CALL_BANKER_NOTIFY = 10049;
	
	//player add score
	C2M_PLAYER_ADD_SCORE_SYN = 10050;
	M2C_PLAYER_ADD_SCORE_ACK = 10051;
	M2C_PLAYER_ADD_SCORE_NOTIFY = 10052;
	
	//player open card
	C2M_PLAYER_OPEN_CARD_SYN = 10053;
	M2C_PLAYER_OPEN_CARD_ACK = 10054;
	M2C_PLAYER_OPEN_CARD_NOTIFY = 10055;
	
	//game end
	M2C_GAME_END_NOTIFY = 10056;
	
	//player state update
	M2C_UPDATE_PLAYER_STATE_NOTIFY = 10057;
	
	//room state update
	M2C_UPDATE_ROOM_STATE_NOTIFY = 10058;
	
	//room state msg
	M2C_ROOM_STATE_FREE_NOTIFY = 10059;
	M2C_ROOM_STATE_CALL_BANKER_NOTIFY = 10060;
	M2C_ROOM_STATE_ADD_SCORE_NOTIFY = 10061;
	M2C_ROOM_STATE_PLAYING_NOTIFY = 10062;
	
	//game all end
	M2C_GAME_ALL_END_NOTIFY = 10063;
	
	//request destroy game room
	M2L_DESTROY_GAME_ROOM_SYN = 10064;
	L2M_DESTROY_GAME_ROOM_ACK = 10065;
	
	//player vote for dismiss room
	C2M_PLAYER_VOTE_BEGIN_SYN = 10066;
	M2C_PLAYER_VOTE_BEGIN_ACK = 10067;
	M2C_PLAYER_VOTE_BEGIN_NOTIFY = 10068;
	C2M_PLAYER_VOTE_SYN = 10069;
	M2C_PLAYER_VOTE_ACK = 10070;
	M2C_PLAYER_VOTE_NOTIFY = 10071;
	M2C_PLAYER_VOTE_END_NOTIFY = 10072;
	
	//game to lobby for game record info
	M2L_GAME_ROOM_RECORD_NOTIFY = 10073;
	
	//game to client player battle info
	C2M_PLAYER_BATTLE_INFO_SYN = 10074;
	M2D_PLAYER_BATTLE_INFO_SYN = 10075;
	M2C_PLAYER_BATTLE_INFO_ACK = 10076;
}

message MSG_G2M_CONN_CLOSE
{
	optional int32 messageID = 1;
	optional uint64 clientid = 2;
}

message MSG_M2G_PLAYER_KICK
{
	optional int32 messageID = 1;
	optional uint64 clientid = 2;
	optional int32 kickreason = 3;
}

message MSG_G2C_PLAYER_KICK
{
	optional int32 messageID = 1;
	optional int32 kickreason = 2;
}

message MSG_REGISTER_SERVER
{
	optional int32 messageID = 1;
	optional int32 servertype = 2;
	optional int32 serverid = 3;
}


message PlayerBaseInfo 
{
	optional uint64  player_id = 1;
	optional string name = 2;
	optional uint32  level = 3;
	optional uint32  exp = 4;
	optional string accountId = 5;
	optional uint32	goldCoin = 6;
	optional uint32	diamond = 7;
	optional uint32	vip = 8;
	optional int64	registerDate = 9;
	optional string password = 10;
	optional uint32 sex = 11;
}


message PlayerTotalInfo 
{
	optional PlayerBaseInfo PlayerInfo =1; 
}

message MSG_C2L_PLAYER_LOGIN_SYN
{
	optional int32 messageID = 1;
	optional string openid = 2;
	optional string accesstoken = 3;
	optional string nickname = 4;
	optional int32 sex = 5;
}

message MSG_L2C_PLAYER_LOGIN_ACK
{
	optional int32 messageID = 1;
	optional int32 errorcode = 2;
	optional uint64 clienttoken = 3;
}

message MSG_L2C_PLAYER_BASEINFO_ACK
{
	optional int32 messageID = 1;
	optional PlayerBaseInfo playerInfo = 2;
	optional uint32 userstate = 3;
}

message MSG_L2D_PLAYER_LOGIN_SYN
{
	optional int32 messageID = 1;
	optional uint64 clientid = 2;
	optional string openid = 3;
	optional string accesstoken = 4;
	optional string nickname = 5;
	optional int32 sex = 6;
}

message MSG_D2L_PLAYER_PLAYER_TOTALINFO_ACK
{
	optional int32 messageID = 1;
	optional int32 errorcode = 2;
	optional PlayerTotalInfo playerInfo = 3;
	optional uint64 clientid = 4;
}

message MSG_L2D_PLAYERINFO_UPDATE_SYN
{
	optional int32 messageID = 1;
	optional PlayerTotalInfo PlayerBaseInfo = 2;
}

message ROOM_CONFIG_INFO
{
	optional int32 gametype = 1;
	optional int32 basescore = 2;
	optional int32 gamecount = 3;
	optional int32 paymode = 4;
	optional int32 doublerule = 5;
	optional int32 specialcardtype = 6;
	optional int32 idleplayerbet = 7;
	optional int32 bankerscore = 8;
	optional int32 maxcatchbanker = 9;
	optional int32 advancedoption = 10;
}

message MSG_C2M_PLAYER_CREATE_ROOM_SYN
{
	optional int32 messageID = 1;
	optional ROOM_CONFIG_INFO roomconfiginfo = 2;
}

message MSG_M2C_PLAYER_CREATE_ROOM_ACK
{
	optional int32 messageID = 1;
	optional int32 errorcode = 2;
	optional string gameip = 3;
	optional int32 gameport = 4;
	optional uint32 roomid = 5;
	optional uint64 ownerid = 6;
}

message MSG_L2M_PLAYER_CREATE_ROOM_SYN
{
	optional int32 messageID = 1;
	optional ROOM_CONFIG_INFO roomconfiginfo = 2;
	optional uint32 roomid = 3;
	optional uint64 ownerid =4;
}

message MSG_M2L_PLAYER_CREATE_ROOM_ACK
{
	optional int32 messageID = 1;
	optional uint32 roomid = 2;
	optional uint64 ownerid =3;
	optional int32 errorcode = 4;
}

message MSG_C2M_PLAYER_ENTER_ROOM_SYN
{
	optional int32 messageID = 1;
	optional uint32 roomid = 2;
	optional uint64 playerid =3;
}

message MSG_M2L_GET_PLAYER_INFO_SYN
{
	optional int32 messageID = 1;
	optional uint64 playerid =2;
	optional uint64 clienttoken = 3;
	optional uint64 clientid = 4;
	optional uint32 roomid = 5;
}

message MSG_L2M_GET_PLAYER_INFO_ACK
{
	optional int32 messageID = 1;
	optional int32 errorcode = 2;
	optional uint64 clienttoken = 3;
	optional uint64 clientid = 4;
	optional uint32 roomid = 5;
	optional PlayerBaseInfo PlayerInfo =6;
}

message MSG_M2C_PLAYER_ENTER_ROOM_ACK
{
	optional int32 messageID = 1;
	optional int32 errorcode = 2;
}

message MSG_M2L_PLAYER_ENTER_ROOM_NOTIFY
{
	optional int32 messageID = 1;
	optional uint32 roomid = 2;
	optional uint64 playerid =3;
	optional uint64 clienttoken = 4;
	optional int32 errorcode = 5;
	optional int32 userstate = 6;
}

message MSG_L2M_PLAYER_TOKEN_EXPIRE_NOTIFY
{
	optional int32 messageID = 1;
	optional uint64 playerid =2;
	optional uint64 clienttoken = 3;
}

message MSG_C2M_PLAYER_REQ_ENTER_ROOM_SYN
{
	optional int32 messageID = 1;
	optional uint32 roomid = 2;
}

message MSG_M2C_PLAYER_REQ_ENTER_ROOM_ACK
{
	optional int32 messageID = 1;
	optional int32 errorcode = 2;
	optional string gameip = 3;
	optional int32 gameport = 4;
	optional uint32 roomid = 5;
	optional uint64 ownerid = 6;
}

message GAME_ROOM_LIST
{
	optional uint32 roomid = 1;
	optional int32 gametype = 2;
	optional int32 basescore = 3;
	optional int32 gamecount = 4;
	optional int32 paymode = 5;
	optional int32 playernum = 6;
}

message MSG_L2C_PLAYER_ROOM_LIST_ACK
{
	optional int32 messageID = 1;
	repeated GAME_ROOM_LIST gameroomlist = 2;
}

message MSG_L2C_GAME_SERVER_INFO_NOTIFY
{
	optional int32 messageID = 1;
	optional string gameip = 2;
	optional int32 gameport = 3;
	optional uint32 roomid = 4;
	optional uint64 ownerid = 5;
}

message MSG_M2L_UPDATE_PLAYER_STATE_NOTIFY
{
	optional int32 messageID = 1;
	optional uint32 userstate = 2;
	optional uint64 playerid = 3;
	optional uint64 clienttoken = 4;
}

message MSG_C2L_PLAYER_RECONNECT_LOBBY_SYN
{
	optional int32 messageID = 1;
	optional uint64 playerid = 2;
	optional uint64 clienttoken = 3;
}

message MSG_L2C_PLAYER_RECONNECT_LOBBY_ACK
{
	optional int32 messageID = 1;
	optional int32 errorcode = 2;
}

message MSG_C2M_PLAYER_RECONNECT_GAME_SYN
{
	optional int32 messageID = 1;
	optional uint64 playerid = 2;
	optional uint64 clienttoken = 3;
}

message MSG_M2C_PLAYER_RECONNECT_GAME_ACK
{
	optional int32 messageID = 1;
	optional int32 errorcode = 2;
}

message MSG_M2C_GAME_ROOM_INFO_NOTIFY
{
	optional int32 messageID = 1;
	optional uint32 roomid = 2;
	optional int32 gametype = 3;
	optional int32 basescore = 4;
	optional int32 gametotalcount = 5;
	optional int32 gamecurcount = 6;
	optional uint64 ownerid = 7;
	optional int32 roomstate = 8;
}

message MSG_M2C_TABLE_PLAYER_INFO_NOTIFY
{
	optional int32 messageID = 1;
	optional uint64  player_id = 2;
	optional string name = 3;
	optional int64	registerDate = 4;
	optional uint32 sex = 5;
	optional int32 userstate = 6;
	optional int32 tableposid = 7;
	optional int32 isonline = 8;
}

message MSG_C2M_PLAYER_SIT_DOWN_SYN
{
	optional int32 messageID = 1;
}

message MSG_M2C_PLAYER_SIT_DOWN_ACK
{
	optional int32 messageID = 1;
	optional int32 errorcode = 2;
	optional int32 tableposid = 3;
}

message MSG_C2M_PLAYER_OP_SYN
{
	optional int32 messageID = 1;
	optional int32 opcode = 2;
}

message MSG_M2C_PLAYER_OP_ACK
{
	optional int32 messageID = 1;
	optional int32 opcode = 2;
	optional int32 errorcode = 3;
}

message MSG_M2C_PLAYER_LEAVE_FROM_ROOM
{
	optional int32 messageID = 1;
	optional uint64 player_id = 2;
}

message MSG_M2C_DISMISS_ROOM_NOTIFY
{
	optional int32 messageID = 1;
}

message MSG_M2L_PLAYER_OP_SYN
{
	optional int32 messageID = 1;
	optional int32 opcode = 2;
	optional uint64 player_id = 3;
	optional uint32 roomid = 4;
}

message MSG_L2M_PLAYER_OP_ACK
{
	optional int32 messageID = 1;
	optional int32 opcode = 2;
	optional uint64 player_id = 3;
	optional uint32 roomid = 4;
}

message MSG_M2L_PLAYER_SIT_DOWN_NOTIFY
{
	optional int32 messageID = 1;
	optional uint64 player_id = 2;
	optional int32 tableposid = 3;
	optional uint32 roomid = 4;
}

message MSG_C2M_GAME_START_SYN
{
	optional int32 messageID = 1;
}

message MSG_M2C_GAME_START_ACK
{
	optional int32 messageID = 1;
	optional int32 errorcode = 2;
}

message MSG_M2C_GAME_START_NOTIFY
{
	optional int32 messageID = 1;
	optional int32 bankeruser = 2;
	optional int32 currplaynumber = 3;
	optional int32 totalplaynumber = 4;
	repeated int64 betmultiple = 5;
}

message PLAYER_HAND_CARD
{
	optional int32 playerpos = 1;
	repeated int32 handcard = 2;
}

message MSG_M2C_PLAYER_HAND_CARD_NOTIFY
{
	optional int32 messageID = 1;
	repeated PLAYER_HAND_CARD playerhandcard = 2;
}

message MSG_C2M_PLAYER_CALL_BANKER_SYN
{
	optional int32 messageID = 1;
	optional int32 callbankertimes = 2;
}

message MSG_M2C_PLAYER_CALL_BANKER_ACK
{
	optional int32 messageID = 1;
	optional int32 errorcode = 2;
}

message MSG_M2C_PLAYER_CALL_BANKER_NOTIFY
{
	optional int32 messageID = 1;
	optional int32 callbankerpos = 2;
	optional int32 bcallbanker = 3;
	optional int32 callbankertimes = 4;
	optional int32 firstcallbanker = 5;
}

message MSG_C2M_PLAYER_ADD_SCORE_SYN
{
	optional int32 messageID = 1;
	optional int64 addscorecount = 2;
}

message MSG_M2C_PLAYER_ADD_SCORE_ACK
{
	optional int32 messageID = 1;
	optional int32 errorcode = 2;
}

message MSG_M2C_PLAYER_ADD_SCORE_NOTIFY
{
	optional int32 messageID = 1;
	optional int32 playerpos = 2;
	optional int64 addscorecount = 3;
}

message MSG_C2M_PLAYER_OPEN_CARD_SYN
{
	optional int32 messageID = 1;
}

message MSG_M2C_PLAYER_OPEN_CARD_ACK
{
	optional int32 messageID = 1;
	optional int32 errorcode = 2;
}

message MSG_M2C_PLAYER_OPEN_CARD_NOTIFY
{
	optional int32 messageID = 1;
	optional int32 cardtype = 2;
	optional PLAYER_HAND_CARD playerhandcard = 3;
}

message GAME_SCORE_INFO
{
	optional int32 playerpos = 1;
	optional int64 playerscore = 2;
}

message MSG_M2C_GAME_END_NOTIFY
{
	optional int32 messageID = 1;
	repeated GAME_SCORE_INFO scoreinfo = 2;
}

message MSG_M2C_UPDATE_PLAYER_STATE_NOTIFY
{
	optional int32 messageID = 1;
	optional int32 playerpos = 2;
	optional uint64 player_id = 3;
	optional int32 playerstate = 4;
}

message MSG_M2C_UPDATE_ROOM_STATE_NOTIFY
{
	optional int32 messageID = 1;
	optional uint32 roomid = 2;
	optional int32 roomstate = 3;
}

message ROOM_STATE_PLAYER_FREE_DATA
{
	optional int32 playerpos = 1;
	optional int64 playertotalscore = 2;
}

message MSG_M2C_ROOM_STATE_FREE_NOTIFY
{
	optional int32 messageID = 1;
	repeated ROOM_STATE_PLAYER_FREE_DATA playerfree = 2;
	optional int32 currplaynumber = 3;
	optional int32 totalplaynumber = 4;
}

message ROOM_STATE_PLAYER_CALL_BANKER_DATA
{
	optional int32 playerpos = 1;
	optional int64 playertotalscore = 2;
	repeated int32 handcard = 3;
	optional int32 callaction = 4;
	optional int32 callscore = 5;
}

message MSG_M2C_ROOM_STATE_CALL_BANKER_NOTIFY
{
	optional int32 messageID = 1;
	repeated ROOM_STATE_PLAYER_CALL_BANKER_DATA playercallbanker = 2;
	optional int32 currplaynumber = 3;
	optional int32 totalplaynumber = 4;
}

message ROOM_STATE_PLAYER_ADD_SCORE_DATA
{
	optional int32 playerpos = 1;
	optional int64 playertotalscore = 2;
	repeated int32 handcard = 3;
	optional int32 callscore = 4;
	optional int32 betaction = 5;
	optional int32 betscore = 6;
}

message	MSG_M2C_ROOM_STATE_ADD_SCORE_NOTIFY
{
	optional int32 messageID = 1;
	repeated ROOM_STATE_PLAYER_ADD_SCORE_DATA playeraddscore = 2;
	optional int32 currplaynumber = 3;
	optional int32 totalplaynumber = 4;
	optional int32 bankerpos = 5;
	repeated int32 betmultiple = 6;
}

message ROOM_STATE_PLAYER_PLAYING_DATA
{
	optional int32 playerpos = 1;
	optional int64 playertotalscore = 2;
	repeated int32 handcard = 3;
	optional int32 callscore = 4;
	optional int32 betscore = 5;
	optional int32 opencardaction = 6;
	optional int32 cardtype = 7;
}

message	MSG_M2C_ROOM_STATE_PLAYING_NOTIFY
{
	optional int32 messageID = 1;
	repeated ROOM_STATE_PLAYER_PLAYING_DATA playerplaying = 2;
	optional int32 currplaynumber = 3;
	optional int32 totalplaynumber = 4;
	optional int32 bankerpos = 5;
}

message PLAYER_GAME_RESULT
{
	optional uint64 player_id = 1;
	optional int32 playerpos = 2;
	optional string nickname = 3;
	optional int64 totalscore = 4;
}

message MSG_M2C_GAME_ALL_END_NOTIFY
{
	optional int32 messageID = 1;
	repeated PLAYER_GAME_RESULT playergameresult = 2;
	optional int64 maxscore = 4;
	optional int64 minscore = 5;
	optional int32 gamenumber = 6;
}

message MSG_M2L_DESTROY_GAME_ROOM_SYN
{
	optional int32 messageID = 1;
	optional int32 roomid = 2;
}

message MSG_L2M_DESTROY_GAME_ROOM_ACK
{
	optional int32 messageID = 1;
	optional int32 roomid = 2;
	optional int32 errorcode = 3;
}

message MSG_C2M_PLAYER_VOTE_BEGIN_SYN
{
	optional int32 messageID = 1;
}

message MSG_M2C_PLAYER_VOTE_BEGIN_ACK
{
	optional int32 messageID = 1;
	optional int32 errorcode = 2;
}

message PLAYER_VOTE_INFO
{
	optional int32 playerpos = 1;
	optional int32 playervoteval = 2;
}

message MSG_M2C_PLAYER_VOTE_BEGIN_NOTIFY
{
	optional int32 messageID = 1;
	repeated PLAYER_VOTE_INFO voteinfo = 2;
	optional int32 sponsorpos = 3;
}

message MSG_C2M_PLAYER_VOTE_SYN
{
	optional int32 messageID = 1;
	optional int32 voteval = 2;
}

message MSG_M2C_PLAYER_VOTE_ACK
{
	optional int32 messageID = 1;
	optional int32 errorcode = 2;
}

message MSG_M2C_PLAYER_VOTE_NOTIFY
{
	optional int32 messageID = 1;
	optional int32 playerpos = 2;
	optional int32 playervoteval = 3;
}

message MSG_M2C_PLAYER_VOTE_END_NOTIFY
{
	optional int32 messageID = 1;
	optional int32 voteresult = 2;
}

message PLAYER_GAME_RECORD_ROUND
{
	optional uint64 playerid = 1;
	optional int64 playerscore = 2;
	optional string playercardlist = 3;
	optional int32 playercallbankertimes = 4;
	optional int64 playeraddscore = 5;
}

message GAME_ROOM_RECORD_ROUND
{
	optional int32 roundid = 1;
	optional uint64 bankerid = 2;
	repeated PLAYER_GAME_RECORD_ROUND playergamerecord = 3;
}

message MSG_M2L_GAME_ROOM_RECORD_NOTIFY
{
	optional int32 messageID = 1;
	optional int32 roomid = 2;
	optional int32 playcount = 3;
	optional int32 totalcount = 4;
	optional uint64 recorddate = 5;
	repeated GAME_ROOM_RECORD_ROUND gameroomrecord = 6;
}

message MSG_C2M_PLAYER_BATTLE_INFO_SYN
{
	optional int32 messageID = 1;
}

message MSG_M2D_PLAYER_BATTLE_INFO_SYN
{
	optional int32 messageID = 1;
	optional uint64 playerid = 2;
}

message CLIENT_GAME_RECORD_ROUND
{
	optional uint64 playerid = 1;
	optional string nickname = 2;
	optional int64 playerscore = 3;
	optional string playercardlist = 4;
	optional int32 playercallbankertimes = 5;
	optional int64 playeraddscore = 6;
}

message CLIENT_GAME_ROOM_RECORD_ROUND
{
	optional int32 roundid = 1;
	optional uint64 bankerid = 2;
	repeated CLIENT_GAME_RECORD_ROUND playergamerecord = 3;
}

message CLIENT_BATTLE_INFO
{
	optional int32 roomid = 1;
	optional int32 playcount = 2;
	optional int32 totalcount = 3;
	optional string recorddate = 4;
	repeated CLIENT_GAME_ROOM_RECORD_ROUND gameroomrecord = 5;
}

message MSG_M2C_PLAYER_BATTLE_INFO_ACK
{
	optional int32 messageID = 1;
	optional uint64 playerid = 2;
	repeated CLIENT_BATTLE_INFO clientbattleinfo = 3;
}
